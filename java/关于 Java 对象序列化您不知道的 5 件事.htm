


<!DOCTYPE html>


<html lang="zh-CN">
<head>
<meta charset="UTF-8"/>	
<meta name="viewport" content="width=device-width, initial-scale=1"/>      
<link rel="icon" href="//www.ibm.com/favicon.ico"/>
<link rel="canonical" href="http://www.ibm.com/developerworks/cn/java/j-5things1/index.html"/>
<meta name="geo.country" content="CN"/>
<meta name="dcterms.rights" content="© Copyright IBM Corporation 2010"/>
<meta name="dcterms.date" content="2010-05-04"/>
<meta name="description" content="Java 对象序列化（Java Object Serialization）在 Java 编程中是如此的基本，以致于很容易让人想当然。但是，和 Java 平台的很多方面一样，只要肯深入挖掘，序列化总能给予回报。在这个新系列的第一篇文章中，Ted Neward 给出 5 个需重新审视 Java 对象序列化的理由，并提供重构、加密和验证序列化数据的技巧（和代码）。"/>	
<meta name="keywords" content=", tttjca"/>
<meta name="robots" content="index,follow"/>
<title>关于 Java 对象序列化您不知道的 5 件事</title>
    
<script> 
    digitalData = {
        "page":{
            "category":{
                "primaryCategory":"SOFDCJVACN"
            },
            "pageInfo":{
                "effectiveDate":"2010-05-04",
                "language":"zh-CN",
                "publishDate":"2010-05-04",
                "publisher":"IBM Corporation",
                "version":"v18",
                "ibm":{ 
                    "contentDelivery":"IBM developerWorks template",
                    "contentProducer":"IBM developerWorks",
                    "country":"CN",
                    "owner":"developerWorks/China/IBM",
                    "subject":"TT300",
                    "type":"CT316",
                    "topic":"应用开发,J2SE (Java 2 Standard Edition)",
                    "topicId":"263,695",
                    "contentArea":"java",
                    "contentAreaId":"1",
                    "contentType":"article",
                    "contentId":"487248",
                },
                "keywords":", tttjca",
                "description":"Java 对象序列化（Java Object Serialization）在 Java 编程中是如此的基本，以致于很容易让人想当然。但是，和 Java 平台的很多方面一样，只要肯深入挖掘，序列化总能给予回报。在这个新系列的第一篇文章中，Ted Neward 给出 5 个需重新审视 Java 对象序列化的理由，并提供重构、加密和验证序列化数据的技巧（和代码）。"
            }
        }
    };
    window._analytics = {
        "segment_key":'HU3dbkAG5wE0F1IkRf9S1RexlAqo3jby'
    };
</script>
	
    <meta name="twitter:card" content="summary"/>
<meta name="twitter:site" content="@developerworks"/>
<meta property="og:title" content="关于 Java 对象序列化您不知道的 5 件事"/>
<meta property="og:description" content="Java 对象序列化（Java Object Serialization）在 Java 编程中是如此的基本，以致于很容易让人想当然。但是，和 Java 平台的很多方面一样，只要肯深入挖掘，序列化总能给予回报。在这个新系列的第一篇文章中，Ted Neward 给出 5 个需重新审视 Java 对象序列化的理由，并提供重构、加密和验证序列化数据的技巧（和代码）。"/>
    <meta property="og:image" content="http://www.ibm.com/developerworks/i/dw-social-201508.png"/>
<!-- Segment meta tag -->
<meta name="segment" property="Java Chinese (developerWorks)" productTitle="developerWorks" value="关于 Java 对象序列化您不知道的 5 件事"/>
<!-- SITE MON : START (DO NOT DELETE) -->
<!-- developerWorks monitoring token -->
<!-- SITE MON : END (DO NOT DELETE) -->

<!-- HEADER_SCRIPTS_AND_CSS_INCLUDE -->
<!-- <script src="//cdn.optimizely.com/js/5399420604.js"></script> -->
<!-- BEGIN: Use this section to set page specific variables for the Page Tag -->
<script language="JavaScript">var NTPT_PGEXTRA="ibmSkillLevel=2&ibmCmaId=487248&ibmContentAreas=java";</script>
<!--END -->
<script src="//1.www.s81c.com/common/stats/ida_stats.js"></script>
<link href="//1.www.s81c.com/common/v18/css/www.css" rel="stylesheet">
<link href="//1.www.s81c.com/common/v18/css/syntaxhighlighter.css" rel="stylesheet">
<script src="//1.www.s81c.com/common/v18/js/www.js"></script>
<script src="//1.www.s81c.com/common/v18/js/syntaxhighlighter.js"></script>    
<link href="//1.www.s81c.com/common/v18/css/tables.css" rel="stylesheet">
<script src="//1.www.s81c.com/common/v18/js/tables.js"></script>   
<!--  Masthead/footer  -->
<link href="//dw1.s81c.com/developerworks/css/dw-mf/v18/dw-mf-v18.css?v=071117" rel="stylesheet">
<!-- <link href="//dw1.s81c.com/developerworks/css/dw-mf/v18/alt-signedin-ux.css" rel="stylesheet" /> -->   
<!--[if lt IE 9]>
    <link href="//dw1.s81c.com/developerworks/css/dw-mf/v18/dw-mf-ie8fix.css?v=022216" rel="stylesheet" />
<![endif]-->
<link href="//dw1.s81c.com/developerworks/css/v18/dw-article.css?v=070617" rel="stylesheet">
<script src="//dw1.s81c.com/developerworks/js/v18/dw-auth-properties.js?v=041017"></script>
<script src="//dw1.s81c.com/developerworks/js/v18/dw-auth.js?v=062717"></script>
<script src="//dw1.s81c.com/developerworks/js/dw-mf/v18/dw-mf.js?v=110316"></script>
<script src="//dw1.s81c.com/developerworks/js/v18/dw-auto-links.js?v=071117"></script> 
<script src="//dw1.s81c.com/developerworks/js/v18/dw-include.js"></script>     
<script src="//dw1.s81c.com/developerworks/js/v18/dw-article.js?v=051817"></script>
<script src="//www.ibm.com/software/info/js/tactic.js"></script>
<script src="//www.ibm.com/software/info/js/tacticbindlinks.js"></script>

<!-- 
<PageMap>
    <DataObject type="document">
        <Attribute name="topic">应用开发,J2SE (Java 2 Standard Edition)</Attribute>
        <Attribute name="topicId">263,695</Attribute>
        <Attribute name="contentArea">java</Attribute>
        <Attribute name="contentAreaId">1</Attribute>
        <Attribute name="abstract">Java 对象序列化（Java Object Serialization）在 Java 编程中是如此的基本，以致于很容易让人想当然。但是，和 Java 平台的很多方面一样，只要肯深入挖掘，序列化总能给予回报。在这个新系列的第一篇文章中，Ted Neward 给出 5 个需重新审视 Java 对象序列化的理由，并提供重构、加密和验证序列化数据的技巧（和代码）。</Attribute>
        <Attribute name="pub.date">2010-05-04</Attribute>
        <Attribute name="contentType">article</Attribute>
    </DataObject>
</PageMap>
-->        

</head>
<body id="ibm-com" class="ibm-type dw-js-disabled">
	
<div id="ibm-top" class="ibm-landing-page">

<!-- MASTHEAD_BEGIN -->
<div id="ibm-masthead" role="banner" aria-label="IBM">
    <div id="ibm-universal-nav">    
  
        <nav role="navigation" aria-label="IBM">
            <div id="ibm-home"><a href="https://www.ibm.com/cn/zh/">IBM®</a></div>
            <ul id="ibm-menu-links" role="toolbar" aria-label="Site map">
                <li><a href="https://www.ibm.com/sitemap/cn/zh/">站点地图</a></li>
            </ul> 
        </nav>
  
        <div id="ibm-search-module" role="search" aria-labelledby="ibm-masthead">
            <form id="ibm-search-form" action="https://www.ibm.com/Search/" method="get">
                <p>
                    <label for="q">IBM</label>
                    <input type="text" maxlength="100" value="" placeholder="搜索" name="q" id="q" aria-label="搜索 developerWorks"/>
                    <input type="hidden" value="18" name="v"/>
                    <input type="hidden" value="utf" name="en"/>
                    <input type="hidden" value="zh" name="lang"/>
                    <input type="hidden" value="cn" name="cc"/>
                    <input type="hidden" name="sn" value="dw" />
                    <input type="hidden" name="dws" value="cndw" />
                    <input type="hidden" name="hpp" value="20" />
                    <input type="submit" id="ibm-search" class="ibm-btn-search" value="提交"/>
                </p>
            </form>
        </div>
       
    </div>
</div><!-- MASTHEAD_END -->
	    
<!-- LAYOUT -->
<div id="ibm-content-wrapper">
    <!-- LEADSPACE_BEGIN -->
    <header role="banner" aria-labelledby="ibm-pagetitle-h1">
        
        <!-- MASTHEAD_SITENAV_BEGIN -->
        <div class="ibm-sitenav-menu-container">
    <div class="ibm-sitenav-menu-name">
        <a href="//www.ibm.com/developerworks/cn/">
            <img width="186" height="24" alt="developerWorks®" src="//dw1.s81c.com/developerworks/i/mf/dw-mf-wordmark.svg"/>
        </a>
    </div>
    <div class="ibm-sitenav-menu-list">
        <ul role="menubar">
                            <li class="dw-navpage-learn" role="presentation">
                    <a href="//www.ibm.com/developerworks/cn/topics/" role="menuitem">学习</a>
                </li>
                    
                <li class="dw-navpage-develop" role="presentation">
                    <a href="//www.ibm.com/developerworks/cn/downloads/" role="menuitem">开发</a>
                </li>                    

                <li class="dw-navpage-connect" role="presentation">
                    <a href="//www.ibm.com/developerworks/cn/community/" role="menuitem">社区</a>
                </li>  
        </ul>
    </div>
</div>        <!-- MASTHEAD_SITENAV_END -->
        
        <!-- NAVIGATION_TRAIL_BEGIN -->
        <div id="ibm-leadspace-head" class="ibm-alternate">
            <div id="ibm-leadspace-body">
                <nav aria-label="Breadcrumb" role="navigation">                     
                            <ul id="dw-navigation-trail" itemscope="" itemtype="http://schema.org/BreadcrumbList"><li itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem"><a itemprop="item" href="http://www.ibm.com/developerworks/cn/topics/"><span itemprop="name">学习</span></a><meta itemprop="position" content="1"/></li><li itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem"><a itemprop="item" href="http://www.ibm.com/developerworks/cn/java/"><span itemprop="name">Java technology</span></a><meta itemprop="position" content="2"/></li></ul>
                </nav>
            </div>
        </div>
        <!-- NAVIGATION_TRAIL_END -->
        
    </header>
    <!-- LEADSPACE_END -->
    
    <!-- MAIN_CONTENT_BEGIN -->
    <main role="main" aria-labelledby="ibm-pagetitle-h1"> 
        <div id="ibm-pcon">
            <!-- BEGIN_IBM-CONTENT -->
            <div id="ibm-content">
                <!-- BEGIN_IBM-CONTENT-BODY -->
                <div id="ibm-content-body">
                    <!-- BEGIN_IBM-CONTENT-MAIN -->
                    <div id="ibm-content-main" class="dw-article">                        
                        <!-- BEGIN_INTERIOR-COLUMNS -->
                                <div class="ibm-columns dw-article-toc">
                                    <!-- LEFT_6_2_CONTENT_COLUMN_BEGIN -->  
                                    <div id="dw-article-toc-container" class="ibm-col-6-2">
                                        <div id="dw-article-toc-body">
                                            <h2>内容</h2><div class="ibm-alternate-rule"><hr/></div><ul role="directory" aria-label="内容" class="ibm-plain-list"><li><a href="#ibm-pagetitle-h1">概览</a></li><li><a href="#N10086">Java 序列化简介</a></li><li><a href="#N100BE">1. 序列化允许重构</a></li><li><a href="#N10119">2. 序列化并不安全</a></li><li><a href="#N1014D">3. 序列化的数据可以被签名和密封</a></li><li><a href="#N1016A">4. 序列化允许将代理放在流中</a></li><li><a href="#N101AE">5. 信任，但要验证</a></li><li><a href="#N101C0">结束语</a></li><li><a href="#artdownload">下载资源</a></li><li><a href="#artrelatedtopics">相关主题</a></li><li><a href="#icomments">评论</a></li></ul>
                                        </div>
                                    </div>
                                    <!-- LEFT_6_2_CONTENT_COLUMN_END -->
                                    
                                    <!-- CENTER_6_4_CONTENT_COLUMN_BEGIN -->
                                    <div class="ibm-col-6-4">
                                        <h1 id="ibm-pagetitle-h1" class="ibm-h1">关于 Java 对象序列化您不知道的 5 件事</h1><p class="dw-article-subhead">序列化的数据是安全的？不见得吧。</p>
                                        <!-- Article Top Bar -->
                                                <div class="ibm-columns dw-article-topbar">
                                                    <!-- Author and article info. -->
                                                    <div class="ibm-col-6-2 ibm-col-medium-6-4 dw-article-metadata">
                                                        <div class="dw-article-avatar"><img width="42" height="42" src="/developerworks/i/p-tneward.jpg" alt="Ted Neward 的照片"/></div><div class="dw-article-authordate">Ted Neward<br /><span class="dw-article-pubdate">2010 年 5 月 04 日发布</span></div>
                                                    </div>
                                                    <!-- Social -->
                                                    <div class="ibm-col-6-2 ibm-col-medium-6-4 ibm-col-small-6-2 dw-article-social">
                                                        <!-- Sharing links -->
                                                        <div id="dw-article-share-inline">
                                                            <div class="dw-article-sharelink-inline">
                                                                <div class="ibm-sharethispage"></div>
                                                            </div>
                                                        </div>
                                                        <!-- Number of comments and link to comments -->
                                                        <div id="dw-article-cmts">
                                                            <div class="dw-article-cmtslink">
                                                                <a onclick="tocLink('#icomments')" href="#icomments" role="link" tabindex="0" aria-label="Comments">
                                                                    <img src="//dw1.s81c.com/developerworks/i/v18/article/dw-article-cmt-icon.png" width="29" height="29" alt="Comments"/>
                                                                </a>
                                                            </div>
                                                            <div class="dw-article-cmtslink">
                                                                <a onclick="tocLink('#icomments')" href="#icomments" role="link" tabindex="0">
                                                                    <div id="nCmts"></div>
                                                                </a>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                        <!-- Article Body -->
                                        
                                        <p>数年前，当和一个软件团队一起用 Java 语言编写一个应用程序时，我体会到比一般程序员多知道一点关于 Java 对象序列化的知识所带来的好处。</p><div class="dw-article-sidebar ibm-background-cool-white-20"><h5>关于本系列</h5><p>您觉得自己懂 Java 编程？事实上，大多数程序员对于 Java 平台都是浅尝则止，只学习了足以完成手头上任务的知识而已。在本 <a href="http://www.ibm.com/developerworks/cn/views/java/libraryview.jsp?search_by=%E6%82%A8%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84+5+%E4%BB%B6%E4%BA%8B">系列</a> 中，Ted Neward 深入挖掘 Java 平台的核心功能，揭示一些鲜为人知的事实，帮助您解决最棘手的编程挑战。</p></div><p>大约一年前，一个负责管理应用程序所有用户设置的开发人员，决定将用户设置存储在一个 <code>Hashtable</code> 中，然后将这个 <code>Hashtable</code> 序列化到磁盘，以便持久化。当用户更改设置时，便重新将 <code>Hashtable</code> 写到磁盘。</p><p>这是一个优雅的、开放式的设置系统，但是，当团队决定从 <code>Hashtable</code> 迁移到 Java Collections 库中的 <code>HashMap</code> 时，这个系统便面临崩溃。</p><p><code>Hashtable</code> 和 <code>HashMap</code> 在磁盘上的格式是不相同、不兼容的。除非对每个持久化的用户设置运行某种类型的数据转换实用程序（极其庞大的任务），否则以后似乎只能一直用 <code>Hashtable</code> 作为应用程序的存储格式。</p><p>团队感到陷入僵局，但这只是因为他们不知道关于 Java 序列化的一个重要事实：Java 序列化允许随着时间的推移而改变类型。当我向他们展示如何自动进行序列化替换后，他们终于按计划完成了向 <code>HashMap</code> 的转变。</p><p>本文是本系列的第一篇文章，这个系列专门揭示关于 Java 平台的一些有用的小知识 &#8212; 这些小知识不易理解，但对于解决 Java 编程挑战迟早有用。</p><p>将 Java 对象序列化 API 作为开端是一个不错的选择，因为它从一开始就存在于 JDK 1.1 中。本文介绍的关于序列化的 5 件事情将说服您重新审视那些标准 Java API。</p><h2 id="N10086" class="ibm-h2">Java 序列化简介</h2><p>Java 对象序列化是 JDK 1.1 中引入的一组开创性特性之一，用于作为一种将 Java 对象的状态转换为字节数组，以便存储或传输的机制，以后，仍可以将字节数组转换回 Java 对象原有的状态。</p><p>实际上，序列化的思想是 “冻结” 对象状态，传输对象状态（写到磁盘、通过网络传输等等），然后 “解冻” 状态，重新获得可用的 Java 对象。所有这些事情的发生有点像是魔术，这要归功于 <code>ObjectInputStream</code>/<code>ObjectOutputStream</code> 类、完全保真的元数据以及程序员愿意用 <code>Serializable</code> 标识接口标记他们的类，从而 “参与” 这个过程。</p><p>清单 1 显示一个实现 <code>Serializable</code> 的 <code>Person</code> 类。</p><h5 id="listing1" class="ibm-h5">清单 1. Serializable Person</h5><span class="dw-code-nohighlight"><pre data-widget="syntaxhighlighter" class="brush: js; html-script: true; gutter: true;">package com.tedneward;

public class Person
    implements java.io.Serializable
{
    public Person(String fn, String ln, int a)
    {
        this.firstName = fn; this.lastName = ln; this.age = a;
    }

    public String getFirstName() { return firstName; }
    public String getLastName() { return lastName; }
    public int getAge() { return age; }
    public Person getSpouse() { return spouse; }

    public void setFirstName(String value) { firstName = value; }
    public void setLastName(String value) { lastName = value; }
    public void setAge(int value) { age = value; }
    public void setSpouse(Person value) { spouse = value; }

    public String toString()
    {
        return "[Person: firstName=" + firstName + 
            " lastName=" + lastName +
            " age=" + age +
            " spouse=" + spouse.getFirstName() +
            "]";
    }    

    private String firstName;
    private String lastName;
    private int age;
    private Person spouse;

}</pre></span><p>将 <code>Person</code> 序列化后，很容易将对象状态写到磁盘，然后重新读出它，下面的 JUnit 4 单元测试对此做了演示。</p><h5 id="listing2" class="ibm-h5">清单 2. 对 Person 进行反序列化</h5><span class="dw-code-nohighlight"><pre data-widget="syntaxhighlighter" class="brush: js; html-script: true; gutter: true;">public class SerTest
{
    @Test public void serializeToDisk()
    {
        try
        {
            com.tedneward.Person ted = new com.tedneward.Person("Ted", "Neward", 39);
            com.tedneward.Person charl = new com.tedneward.Person("Charlotte",
                "Neward", 38);

            ted.setSpouse(charl); charl.setSpouse(ted);

            FileOutputStream fos = new FileOutputStream("tempdata.ser");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(ted);
            oos.close();
        }
        catch (Exception ex)
        {
            fail("Exception thrown during test: " + ex.toString());
        }
        
        try
        {
            FileInputStream fis = new FileInputStream("tempdata.ser");
            ObjectInputStream ois = new ObjectInputStream(fis);
            com.tedneward.Person ted = (com.tedneward.Person) ois.readObject();
            ois.close();
            
            assertEquals(ted.getFirstName(）， "Ted");
            assertEquals(ted.getSpouse().getFirstName(）， "Charlotte");

            // Clean up the file
            new File("tempdata.ser").delete();
        }
        catch (Exception ex)
        {
            fail("Exception thrown during test: " + ex.toString());
        }
    }
}</pre></span><p>到现在为止，还没有看到什么新鲜的或令人兴奋的事情，但是这是一个很好的出发点。我们将使用 <code>Person</code> 来发现您可能<em>不</em> 知道的关于 <em>Java 对象序列化</em> 的 5 件事。</p><h2 id="N100BE" class="ibm-h2">1. 序列化允许重构</h2><p>序列化允许一定数量的类变种，甚至重构之后也是如此，<code>ObjectInputStream</code> 仍可以很好地将其读出来。</p><p><em>Java Object Serialization</em> 规范可以自动管理的关键任务是：</p><ul class="ibm-bullet-list"><li>将新字段添加到类中</li><li>将字段从 static 改为非 static</li><li>将字段从 transient 改为非 transient</li></ul><p>取决于所需的向后兼容程度，转换字段形式（从非 static 转换为 static 或从非 transient 转换为 transient）或者删除字段需要额外的消息传递。</p><h3 id="N100D5" class="ibm-h3">重构序列化类</h3><p>既然已经知道序列化允许重构，我们来看看当把新字段添加到 <code>Person</code> 类中时，会发生什么事情。</p><p>如清单 3 所示，<code>PersonV2</code> 在原先 <code>Person</code> 类的基础上引入一个表示性别的新字段。</p><h5 id="listing3" class="ibm-h5">清单 3. 将新字段添加到序列化的 Person 中</h5><span class="dw-code-nohighlight"><pre data-widget="syntaxhighlighter" class="brush: js; html-script: true; gutter: true;">enum Gender
{
    MALE, FEMALE
}

public class Person
    implements java.io.Serializable
{
    public Person(String fn, String ln, int a, Gender g)
    {
        this.firstName = fn; this.lastName = ln; this.age = a; this.gender = g;
    }
  
    public String getFirstName() { return firstName; }
    public String getLastName() { return lastName; }
    public Gender getGender() { return gender; }
    public int getAge() { return age; }
    public Person getSpouse() { return spouse; }

    public void setFirstName(String value) { firstName = value; }
    public void setLastName(String value) { lastName = value; }
    public void setGender(Gender value) { gender = value; }
    public void setAge(int value) { age = value; }
    public void setSpouse(Person value) { spouse = value; }

    public String toString()
    {
        return "[Person: firstName=" + firstName + 
            " lastName=" + lastName +
            " gender=" + gender +
            " age=" + age +
            " spouse=" + spouse.getFirstName() +
            "]";
    }    

    private String firstName;
    private String lastName;
    private int age;
    private Person spouse;
    private Gender gender;
}</pre></span><p>序列化使用一个 hash，该 hash 是根据给定源文件中几乎所有东西 &#8212; 方法名称、字段名称、字段类型、访问修改方法等 &#8212; 计算出来的，序列化将该 hash 值与序列化流中的 hash 值相比较。</p><p>为了使 Java 运行时相信两种类型实际上是一样的，第二版和随后版本的 <code>Person</code> 必须与第一版有相同的序列化版本 hash（存储为 private static final <code>serialVersionUID</code> 字段）。因此，我们需要 <code>serialVersionUID</code> 字段，它是通过对原始（或 V1）版本的 <code>Person</code> 类运行 JDK <code>serialver</code> 命令计算出的。</p><p>一旦有了 <code>Person</code> 的 <code>serialVersionUID</code>，不仅可以从原始对象 <code>Person</code> 的序列化数据创建 <code>PersonV2</code> 对象（当出现新字段时，新字段被设为缺省值，最常见的是“null”），还可以反过来做：即从 <code>PersonV2</code> 的数据通过反序列化得到 <code>Person</code>，这毫不奇怪。</p><h2 id="N10119" class="ibm-h2">2. 序列化并不安全</h2><p>让 Java 开发人员诧异并感到不快的是，序列化二进制格式完全编写在文档中，并且完全可逆。实际上，只需将二进制序列化流的内容转储到控制台，就足以看清类是什么样子，以及它包含什么内容。</p><p>这对于安全性有着不良影响。例如，当通过 RMI 进行远程方法调用时，通过连接发送的对象中的任何 private 字段几乎都是以明文的方式出现在套接字流中，这显然容易招致哪怕最简单的安全问题。</p><p>幸运的是，序列化允许 “hook” 序列化过程，并在序列化之前和反序列化之后保护（或模糊化）字段数据。可以通过在 <code>Serializable</code> 对象上提供一个 <code>writeObject</code> 方法来做到这一点。</p><h3 id="N1012A" class="ibm-h3">模糊化序列化数据</h3><p>假设 <code>Person</code> 类中的敏感数据是 age 字段。毕竟，女士忌谈年龄。
我们可以在序列化之前模糊化该数据，将数位循环左移一位，然后在反序列化之后复位。（您可以开发更安全的算法，当前这个算法只是作为一个例子。）</p><p>为了 “hook” 序列化过程，我们将在 <code>Person</code> 上实现一个 <code>writeObject</code> 方法；为了 “hook” 反序列化过程，我们将在同一个类上实现一个 <code>readObject</code> 方法。重要的是这两个方法的细节要正确 &#8212; 如果访问修改方法、参数或名称不同于清单 4 中的内容，那么代码将不被察觉地失败，<code>Person</code> 的 age 将暴露。</p><h5 id="listing4" class="ibm-h5">清单 4. 模糊化序列化数据</h5><span class="dw-code-nohighlight"><pre data-widget="syntaxhighlighter" class="brush: js; html-script: true; gutter: true;">public class Person
    implements java.io.Serializable
{
    public Person(String fn, String ln, int a)
    {
        this.firstName = fn; this.lastName = ln; this.age = a;
    }

    public String getFirstName() { return firstName; }
    public String getLastName() { return lastName; }
    public int getAge() { return age; }
    public Person getSpouse() { return spouse; }
    
    public void setFirstName(String value) { firstName = value; }
    public void setLastName(String value) { lastName = value; }
    public void setAge(int value) { age = value; }
    public void setSpouse(Person value) { spouse = value; }

    private void writeObject(java.io.ObjectOutputStream stream)
        throws java.io.IOException
    {
        // "Encrypt"/obscure the sensitive data
        age = age &lt;&lt; 2;
        stream.defaultWriteObject();
    }

    private void readObject(java.io.ObjectInputStream stream)
        throws java.io.IOException, ClassNotFoundException
    {
        stream.defaultReadObject();

        // "Decrypt"/de-obscure the sensitive data
        age = age &lt;&lt; 2;
    }
    
    public String toString()
    {
        return "[Person: firstName=" + firstName + 
            " lastName=" + lastName +
            " age=" + age +
            " spouse=" + (spouse!=null ? spouse.getFirstName() : "[null]") +
            "]";
    }      

    private String firstName;
    private String lastName;
    private int age;
    private Person spouse;
}</pre></span><p>如果需要查看被模糊化的数据，总是可以查看序列化数据流/文件。而且，由于该格式被完全文档化，即使不能访问类本身，也仍可以读取序列化流中的内容。</p><h2 id="N1014D" class="ibm-h2">3. 序列化的数据可以被签名和密封</h2><p>上一个技巧假设您想模糊化序列化数据，而不是对其加密或者确保它不被修改。当然，通过使用 <code>writeObject</code> 和 <code>readObject</code> 可以实现密码加密和签名管理，但其实还有更好的方式。</p><p>如果需要对整个对象进行加密和签名，最简单的是将它放在一个 <code>javax.crypto.SealedObject</code> 和/或 <code>java.security.SignedObject</code> 包装器中。两者都是可序列化的，所以将对象包装在 <code>SealedObject</code> 中可以围绕原对象创建一种 “包装盒”。必须有对称密钥才能解密，而且密钥必须单独管理。同样，也可以将 <code>SignedObject</code> 用于数据验证，并且对称密钥也必须单独管理。</p><p>结合使用这两种对象，便可以轻松地对序列化数据进行密封和签名，而不必强调关于数字签名验证或加密的细节。很简洁，是吧？</p><h2 id="N1016A" class="ibm-h2">4. 序列化允许将代理放在流中</h2><p>很多情况下，类中包含一个核心数据元素，通过它可以派生或找到类中的其他字段。在此情况下，没有必要序列化整个对象。可以将字段标记为 <em>transient</em>，但是每当有方法访问一个字段时，类仍然必须显式地产生代码来检查它是否被初始化。</p><p>如果首要问题是序列化，那么最好指定一个 flyweight 或代理放在流中。为原始 <code>Person</code> 提供一个 <code>writeReplace</code> 方法，可以序列化不同类型的对象来代替它。类似地，如果反序列化期间发现一个 <code>readResolve</code> 方法，那么将调用该方法，将替代对象提供给调用者。</p><h3 id="N1017F" class="ibm-h3">打包和解包代理</h3><p><code>writeReplace</code> 和 <code>readResolve</code> 方法使 <code>Person</code> 类可以将它的所有数据（或其中的核心数据）打包到一个
     <code>PersonProxy</code> 中，将它放入到一个流中，然后在反序列化时再进行解包。</p><h5 id="listing5" class="ibm-h5">清单 5. 你完整了我，我代替了你</h5><span class="dw-code-nohighlight"><pre data-widget="syntaxhighlighter" class="brush: js; html-script: true; gutter: true;">class PersonProxy
    implements java.io.Serializable
{
    public PersonProxy(Person orig)
    {
        data = orig.getFirstName() + "," + orig.getLastName() + "," + orig.getAge();
        if (orig.getSpouse() != null)
        {
            Person spouse = orig.getSpouse();
            data = data + "," + spouse.getFirstName() + "," + spouse.getLastName() + ","  
              + spouse.getAge();
        }
    }

    public String data;
    private Object readResolve()
        throws java.io.ObjectStreamException
    {
        String[] pieces = data.split(",");
        Person result = new Person(pieces[0], pieces[1], Integer.parseInt(pieces[2]));
        if (pieces.length &gt; 3)
        {
            result.setSpouse(new Person(pieces[3], pieces[4], Integer.parseInt
              (pieces[5])));
            result.getSpouse().setSpouse(result);
        }
        return result;
    }
}

public class Person
    implements java.io.Serializable
{
    public Person(String fn, String ln, int a)
    {
        this.firstName = fn; this.lastName = ln; this.age = a;
    }

    public String getFirstName() { return firstName; }
    public String getLastName() { return lastName; }
    public int getAge() { return age; }
    public Person getSpouse() { return spouse; }

    private Object writeReplace()
        throws java.io.ObjectStreamException
    {
        return new PersonProxy(this);
    }
    
    public void setFirstName(String value) { firstName = value; }
    public void setLastName(String value) { lastName = value; }
    public void setAge(int value) { age = value; }
    public void setSpouse(Person value) { spouse = value; }   

    public String toString()
    {
        return "[Person: firstName=" + firstName + 
            " lastName=" + lastName +
            " age=" + age +
            " spouse=" + spouse.getFirstName() +
            "]";
    }    
    
    private String firstName;
    private String lastName;
    private int age;
    private Person spouse;
}</pre></span><p>注意，<code>PersonProxy</code> 必须跟踪 <code>Person</code> 的所有数据。这通常意味着代理需要是 <code>Person</code> 的一个内部类，以便能访问 private 字段。有时候，代理还需要追踪其他对象引用并手动序列化它们，例如 <code>Person</code> 的 spouse。</p><p>这种技巧是少数几种不需要读/写平衡的技巧之一。例如，一个类被重构成另一种类型后的版本可以提供一个 <code>readResolve</code> 方法，以便静默地将被序列化的对象转换成新类型。类似地，它可以采用 <code>writeReplace</code> 方法将旧类序列化成新版本。</p><h2 id="N101AE" class="ibm-h2">5. 信任，但要验证</h2><p>认为序列化流中的数据总是与最初写到流中的数据一致，这没有问题。但是，正如一位美国前总统所说的，“信任，但要验证”。</p><p>对于序列化的对象，这意味着验证字段，以确保在反序列化之后它们仍具有正确的值，“以防万一”。为此，可以实现 <code>ObjectInputValidation</code> 接口，并覆盖 <code>validateObject()</code> 方法。如果调用该方法时发现某处有错误，则抛出一个 <code>InvalidObjectException</code>。</p><h2 id="N101C0" class="ibm-h2">结束语</h2><p>Java 对象序列化比大多数 Java 开发人员想象的更灵活，这使我们有更多的机会解决棘手的情况。</p><p>幸运的是，像这样的编程妙招在 JVM 中随处可见。关键是要知道它们，在遇到难题的时候能用上它们。</p><p><em>5 件事</em> 系列下期预告：Java Collections。在此之前，好好享受按自己的想法调整序列化吧！</p><!--CMA ID: 487248--><!--Site ID: 10--><!--XSLT stylesheet used to transform this file: dw-document-html-8.0.xsl--> 
                                        <!-- Article Resources -->
                                        <div class="ibm-alternate-rule"><hr/></div><h4 id="artdownload" class="ibm-h4">下载资源</h4><ul class="ibm-link-list"><li><a class="ibm-download-link" href="http://www.ibm.com/developerworks/apps/download/index.jsp?contentid=487248&amp;filename=5things1-src.zip&amp;method=http&amp;locale=zh_CN">本文样例代码</a> (5things1-src.zip &#124; 10KB)</li></ul><div class="ibm-alternate-rule"><hr/></div><h4 id="artrelatedtopics" class="ibm-h4">相关主题</h4><ul><li>“<a href="http://www.ibm.com/developerworks/cn/java/j-serialtest.html">测试对象串行化</a>”（Elliotte Rusty Harold，IBM developerWorks，2006 年 6 月）：了解测试对象的序列化格式为什么重要，然后试着用不同的方法测试对象的序列化。</li><li>“<a href="http://www.javaworld.com/javaworld/jw-07-2000/jw-0714-flatten.html">Discover the secrets of the Java Serialization API</a>”（Todd M. Greanier，JavaWorld，2000 年 7 月）：这篇文章对 Java Serialization API 作了概述，并提供 3 种序列化 Java 对象的方法。</li><li>“<a href="http://www.javaworld.com/community/node/2915">The Java Serialization algorithm revealed</a>”（Sathiskumar Palaniappan，JavaWorld，2009 年 5 月）：更仔细地研究 Java 序列化算法的细节。</li><li><a href="http://java.sun.com/j2se/1.4/pdf/serial-spec.pdf">Java Object Serialization</a>： 下载 PDF 格式的 Java Serialization 规范。</li><li><a href="http://www.ibm.com/developerworks/cn/java/">developerWorks Java 技术专区</a>： 这里有数百篇关于 Java 编程每个方面的文章。</li></ul>
                                        <!-- Commenting -->
<!-- INLINE_COMMENTS_BEGIN: -->
<div class="ibm-alternate-rule"><hr/></div>
<div id="dw-article-cmts-top" class="ibm-columns">
    <div class="ibm-col-6-2">
        <h4 id="icomments" class="ibm-h4">评论</h4>
        <div id="dw-article-cmts-login">
            <p>添加或订阅评论，请先<a onClick="window.location=userLinks[0].url;" tabindex="0" role="link">登录</a>或<a onClick="window.location=userLinks[1].url;" tabindex="0" role="link">注册</a>。</p>
        </div>
    </div>    
    <div class="ibm-col-6-2" id="dw-notify"> 
        <input type="checkbox" value="1" name="comment_notification" id="comment_notification" disabled="disabled">
        <label for="comment_notification">有新评论时提醒我</label>	   
    </div>
</div>

<div class="dw-article-cmts-container">       
    <div class="ibm-no-print" id="dw-icomments-container">	
        
    </div>
</div>
<!-- INLINE_COMMENTS_END -->                                        <!-- CENTER_6_4_CONTENT_COLUMN_END -->
                                    </div>   
                                </div>
                        <!--Rating_Meta_BEGIN--><div class="metavalue">static.content.url=http://www.ibm.com/developerworks/js/artrating/</div><div class="metavalue">SITE_ID=10</div><div class="metavalue">Zone=Java technology</div><div class="metavalue">ArticleID=487248</div><div class="metavalue">ArticleTitle=关于 Java 对象序列化您不知道的 5 件事</div><div class="metavalue">publish-date=05042010</div><script language="javascript" type="text/javascript">document.write('<div class="metavalue">url='+location.href.replace(/</g,  '%3C')+'</div>');</script><!--Rating_Meta_END-->
                    </div>
                    <!-- END_IBM-CONTENT-MAIN -->
                </div>
                <!-- END_IBM-CONTENT-BODY -->
            </div>
            <!-- END_IBM-CONTENT -->
        </div>
        <!-- END_IBM-PCON -->
    </main>
    <!-- MAIN_CONTENT_END -->
    
    <!-- END_CONTENT-WRAPPER -->	
</div>
<!-- FOOTER_BEGIN -->
<footer role="contentinfo" aria-label="IBM developerWorks">
    <div id="dw-footer-module" class="dw-footer-home">
        <section aria-label="参考资料" role="contentinfo">
            <div class="ibm-columns">
                <div class="ibm-col-6-1 dw-footer-col-1">
                    <ul>
                        <li class="dw-footer-heading" aria-label="developerWorks">developerWorks</li>
                        <li><a href="//www.ibm.com/developerworks/secure/feedback.jsp?domain=dwchina">站点反馈</a></li>
                        <li class="dw-footer-newline"><a href="//www.ibm.com/developerworks/secure/myideas2.jsp?domain=dwchina">我要投稿</a></li>
                        <li class="dw-footer-newline"><a href="//www.ibm.com/developerworks/cn/author/">投稿指南</a></li>
                        <li class="dw-footer-newline"><a href="//www.ibm.com/developerworks/community/report?lang=zh">报告滥用</a></li>
                        <li class="dw-footer-newline"><a href="//www.ibm.com/developerworks/cn/community/terms/thirdparty/">第三方提示</a></li>
                    </ul>
                    <ul>
                        <li class="dw-footer-newline"><a href="//weibo.com/ibmdw/">关注微博</a></li>
                    </ul>
                </div>
                <div class="ibm-col-6-1 dw-footer-col-2">
                    <ul>
                        <li class="dw-footer-heading" aria-label="加入">加入</li>
                        <li class="dw-footer-newline"><a href="//www.ibm.com/partnerworld/isv/">ISV 资源 (英语)</a></li>
                    </ul>
                    <ul class="dw-footer-lang" aria-label="选择语言">
                        <li class="dw-footer-heading">选择语言</li>
                        <li><a href="//www.ibm.com/developerworks/">English</a></li>
                        <li><a href="//www.ibm.com/developerworks/cn/" lang="zh">中文</a></li>
                        <li><a href="//www.ibm.com/developerworks/jp/" lang="ja">日本語</a></li>
                        <li><a href="//www.ibm.com/developerworks/ru/" lang="ru">Русский</a></li>
                        <li class="dw-footer-newline"><a href="//www.ibm.com/developerworks/br/" lang="pt">Português (Brasil)</a></li>
                        <li><a href="//www.ibm.com/developerworks/ssa/" lang="es">Español</a></li>
                        <li><a href="//developer.ibm.com/kr/" lang="kr">한글</a></li>
                    </ul>
                </div>
                <div class="ibm-col-6-1 dw-footer-col-3"> </div>
                <div class="ibm-col-6-1 dw-footer-col-4">
                    <ul class="dw-footer-categories">
                        <li class="dw-footer-category">
                            <a href="//www.ibm.com/developerworks/cn/views/global/libraryview.jsp">技术文档库</a>
                        </li>
                        <li class="dw-footer-category">
                            <a href="//www.ibm.com/developerworks/cn/rss/">订阅源</a>  
                        </li>
                    </ul>
                </div>
                <div class="ibm-col-6-1 dw-footer-col-5">
                    <ul class="dw-footer-categories">
                        <li class="dw-footer-category">
                            <a href="//www.ibm.com/developerworks/cn/community/">社区</a>  
                        </li>
                        <li class="dw-footer-category">
                            <a href="http://ibmdeveloperworks.mkt6741.com/developerWorksChina-NewsletterSubscriptionPage/">dW 中国时事通讯</a>  
                        </li>
                    </ul>
                </div>
                <div class="ibm-col-6-1 dw-footer-col-6">
                    <ul class="dw-footer-categories">
                        <li class="dw-footer-category">
                            <a href="//www.ibm.com/developerworks/cn/downloads/">软件下载</a>  
                        </li>
                    </ul>
                </div>
            </div>
        </section>
    </div>
    <div id="dw-footer" class="ibm-padding-normal ibm-alternate">
        <div class="ibm-columns">
            <div class="ibm-col-1-1">
                <div class="dw-footer-corporate-links">
                <ul>
                    <li><a href="//www.ibm.com/contact/cn/zh/">联系 IBM</a></li>
                    <li><a href="//www.ibm.com/privacy/cn/zh/">隐私条约</a></li>
                    <li><a href="//www.ibm.com/developerworks/community/terms?lang=zh">使用条款</a></li>
                    <li><a href="//www.ibm.com/accessibility/cn/zh/">信息无障碍选项</a></li>
                    <li class="ibm-feedbacklink"><a href="#">反馈</a></li>
                    <li id="ibm-truste-cp"><a onclick="truste.eu.clickListener();return false;" href="#">Cookie 首选项</a></li>
                </ul>                 
                </div>    
            </div>
        </div>
    </div>        
</footer> <!-- FOOTER_END -->

<!-- END_IBM-TOP -->
</div>

<!-- SCRIPTS_INCLUDE_BEGIN -->
<!-- Styles -->
<link rel="stylesheet" type="text/css" href="/developerworks/maverick/css/plugin/comments/jquery-comments.css">
<link rel="stylesheet" href="/developerworks/maverick/fonts/awesome-4.5.0/css/font-awesome.min.css">

<!-- Libraries -->
<script type="text/javascript" src="/developerworks/maverick/js/plugin/comments/jquery-comments.min.js"></script>
<script type="text/javascript" src="/developerworks/maverick/js/plugin/formatter/moment-with-locales.js"></script>
<script type="text/javascript" src="/developerworks/maverick/js/ContentComments.js"></script>
<script type="text/javascript" src="/developerworks/js/v18/ContentCommentsFormatter.js"></script>
<script type="text/javascript" language="JavaScript">

	IBMCore.common.module.masthead.subscribe("ready", "customjs", setupCommentsPlugin).runAsap(setupCommentsPlugin);

	function setupCommentsPlugin(){
		//debugger;
			//alert(userLinks);
			var commentsInitInfo = {
				contentId : $("div[class=metavalue]:contains('ArticleID=')").text().split("=")[1],
				siteId :  $("div[class=metavalue]:contains('SITE_ID=')").text().split("=")[1],
				pluginDivId : '#dw-icomments-container',
				notifyElementId : "#comment_notification",
				loginMessageDivId : "#dw-article-cmts-login",
				totalCommentsDivId : "#nCmts"
			};				
								
			ContentComments.Setup(commentsInitInfo);
	}
</script>
<!-- Piwik -->
<script type="text/javascript">
    var _paq = _paq || [];
    _paq.push(["setDomains", ["*.www.ibm.com/developerworks","*.www.ibm.com/developerworks"]]);
    _paq.push(['trackPageView']);
    _paq.push(['enableLinkTracking']);
    (function() {
    var u="//developer.ibm.com/piwik/";
    _paq.push(['setTrackerUrl', u+'piwik.php']);
    _paq.push(['setSiteId', 7]);
    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);
    })();
</script>
<noscript><p><img src="//developer.ibm.com/piwik/piwik.php?idsite=7" style="border:0;" alt="" /></p></noscript>
<!-- End Piwik Code -->
<!-- SCRIPTS_INCLUDE_END -->

</body>
</html>
